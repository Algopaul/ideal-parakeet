# go/google3metadata
# proto-file: devtools/metadata/metadata.proto
# proto-message: MetaData

name: "swirl_lm"
description:
  "Swirl-LM is a computational fluid dynamics simulation framework for low "
  "Mach number turbulent flows with variable density implemented with "
  "TensorFlow."

third_party {
  url {
    type: HOMEPAGE
    value: "http://go/swirl_lm"
  }
  url {
    type: PIPER
    value: "http://google3/third_party/py/swirl_lm"
  }
}

presubmit: {
  include_presubmit: "//depot/google3/research/simulation/METADATA"
  path_expression: "//depot/google3/third_party/py/swirl_lm/..."

  # TODO(swirl_lm): To activate presubmit, you should replace by your
  # tap/swirl_lm (defined in your `.blueprint` file)
  #   review_notify: "swirl_lm-automated+reviews"
  #
  #   check_tests: {
  #     failure_status: ERROR
  #     project: "swirl_lm"
  #   }
  #
  #   # Checks that files in the changelist do not contain tab characters.
  #   check_tabs: {
  #     failure_status: ERROR
  #   }
  #
  #   check_trailing_whitespace: {
  #     failure_status: ERROR
  #   }
  #
  #   # Presubmit applied during submit
  #
  #   check_lint: {
  #     action: SUBMIT  # Do not activate by default to not block TAP.
  #     failure_status: ERROR
  #   }
  #
  #   # Ensures that the string "do not submit" (in all caps) is not present.
  #   check_do_not_submit: {
  #     action: SUBMIT
  #   }
}

# TODO(swirl_lm): Uncomment after copy.bara.sky has been set-up
# # Copybara presubmit
# presubmit: {
#   path_expression: "//depot/google3/third_party/py/swirl_lm/..."
#   # Do not trigger copybara for the following files
#   path_expression_exclusion: "//depot/.../METADATA"
#   path_expression_exclusion: "//depot/.../OWNERS"
#   path_expression_exclusion: "//depot/.../BUILD"
#   path_expression_exclusion: "//depot/.../*.bzl"
#   path_expression_exclusion: "//depot/.../google/..."

#   # Ensure that changes contain public notes for git commit messages.
#   check_description: {
#     base: {
#       id: "CopybaraDescription"
#       disable_tags: "GIT_ORIGIN_REV_ID"
#       disable_tags: "SKIP_COPYBARA"
#     }

#     required_regexp:
#       "("
#       "(^|\\n)\\s*BEGIN_PUBLIC\\s*?\\n"
#       "(.*\\n)*"
#       "\\s*\\S+.*(\\n.*)*\\n"
#       "\\s*END_PUBLIC\\s*?\\n"
#       "|"
#       "(^|\\n)\\s*PUBLIC:(?: )*\\S+"
#       ")"

#     failure_message:
#       "\n"
#       "By running presubmit, this cl will be exported as PR on github. "
#       "Please add a public commit message to the cl description:\n"
#       "\n"
#       "PUBLIC: my public commit msg\n"
#       "\n"
#       "OR\n"
#       "\n"
#       "BEGIN_PUBLIC\n"
#       "my public\n"
#       "commit msg\n"
#       "END_PUBLIC\n"
#       "\n"
#       "If you're certain your change does not produce public changes, the\n"
#       "message can say 'Internal'.\n"
#     failure_status: WARNING
#     required_for_cleanup: false
#   }

#   check_presubmit_service: {
#     base: {
#       id: "Copybara-Review"
#       disable_tags: "GIT_ORIGIN_REV_ID"
#       disable_tags: "SKIP_COPYBARA"
#     }
#     action: REVIEW
#     streaming: true
#     timeout: 30
#     failure_status: WARNING
#     execution_mode: SECONDARY_EXECUTION
#     include_all_opened_files: true
#     include_deleted_files: true
#     address: "blade:copybara-streaming-presubmit-service-prod"
#     options: "depot_path=//depot/google3/third_party/py/swirl_lm/copy.bara.sky;workflow=presubmit_piper_to_github;feedback=feedback_github_to_critique;category_suffix=swirl_lm;blocking=false"
#   }
#   check_presubmit_service: {
#     base: {
#       id: "Copybara-Submit-swirl_lm"
#       disable_tags: "GIT_ORIGIN_REV_ID"
#       disable_tags: "SKIP_COPYBARA"
#     }
#     action: SUBMIT
#     streaming: true
#     timeout: 600
#     failure_status: ERROR
#     execution_mode: SECONDARY_EXECUTION
#     include_all_opened_files: true
#     include_deleted_files: true
#     address: "blade:copybara-streaming-presubmit-service-prod"
#     options: "depot_path=//depot/google3/third_party/py/swirl_lm/copy.bara.sky;workflow=presubmit_piper_to_github;feedback=feedback_github_to_critique;category_suffix=swirl_lm;blocking=true"
#   }
# }
